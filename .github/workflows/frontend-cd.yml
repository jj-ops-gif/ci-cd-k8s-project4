name: Frontend Continuous Deployment
on:
  workflow_dispatch: 
  push: 
    branches:
      - feature_test
    # paths:
    #   - starter/frontend/**
env:
  AWS_REGION: us-east-1     # Update this to your AWS Region
  REPOSITORY: frontend
  CLUSTER_NAME: cluster

jobs:
  # lint:
  #   name: Run lint
  #   runs-on: ubuntu-latest   # Use the latest Ubuntu runner
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./starter/frontend

  #   steps:
  #     # Check out the code to the runner
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4.0.2
  #       with:
  #         node-version: 20.x
  #         cache: 'npm'  # Perform a cache action to restore cache before dependency install
  #         cache-dependency-path: starter/frontend/package-lock.json
        
  #     - name: Install the dependencies
  #       run: npm ci
      
  #     - name: Run linter
  #       run: npm run lint

  # test:
  #   name: Run test
  #   runs-on: ubuntu-latest   # Use the latest Ubuntu runner
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./starter/frontend

  #   steps:
  #     - name: Checkout the code to the runner
  #       uses: actions/checkout@v4
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4.0.2
  #       with:
  #         node-version: 20.x
  #         cache: 'npm'  # Perform a cache action to restore cache before dependency install
  #         cache-dependency-path: starter/frontend/package-lock.json
          
  #     - name: Install the dependencies
  #       run: npm ci

  #     - name: Run test
  #       run: npm run test

  build:
    name: Run build
    # needs: [lint, test]
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
          aws-region: ${{ env.AWS_REGION }} # Use the region from your environment variables
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo $IMAGE_TAG
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{vars.REACT_APP_MOVIE_API_URL}} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: 'Deploy Kubernetes Manifests'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd k8s
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          pwd
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo '--- test 1 -'
          kustomize build | kubectl apply -f -
