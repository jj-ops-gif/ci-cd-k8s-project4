name: Frontend Deployment
on:
  workflow_dispatch: 
  push: 
    branches:
      - feature_test
    # paths:
    #   - starter/frontend/**
# env:
#   AWS_REGION: us-east-1     # Update this to your AWS Region
#   TF_ACTION_WORKING_DIR: 'terraform' # Update this to your Terraform files directory

jobs:
  run_test:
    name: Run test
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
        
      - name: Install the dependencies
        run: npm ci

      - name: Run test
        run: npm test

  run_build:
    name: Run build
    needs: [run_test]
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run build
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .
          docker run --name mp-frontend -p 3000:3000 -d mp-frontend]
          curl http://localhost:3000

  # deploy_k8s:
  #   name: 'Deploy to ECR'
  #   runs-on: ubuntu-latest   # Use the latest Ubuntu runner

  #   steps:
  #     # Check out the code to the runner
  #     - name: Checkout
  #       uses: actions/checkout@v3
      
  #     # # Configure AWS credentials
  #     # - name: Configure AWS credentials
  #     #   uses: aws-actions/configure-aws-credentials@v2
  #     #   with:
  #     #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
  #     #     aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
  #     #     aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
  #     #     aws-region: ${{ env.AWS_REGION }} # Use the region from your environment variables
        
  #     # Run Test
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
      
      
      
      
  #     # Set up the specified version of Terraform
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
      
  #     # Initialize your Terraform configuration
  #     - name: Terraform Init
  #       run: terraform init

  #     # Validate your Terraform configuration
  #     - name: Terraform Validate
  #       run: terraform validate 

  #     # Generate and display an execution plan
  #     - name: Terraform Plan
  #       run: terraform plan 

  #     # Apply the changes required to reach the desired state of the configuration
  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve 

  #     # Check the status of the Blue environment
  #     - name: Check status of Blue Environment
  #       id: blue_status
  #       run: echo "::set-output name=status::$(terraform output -raw blue_status)"

  #     # Check the status of the Green environment
  #     - name: Check status of Green Environment
  #       id: green_status
  #       run: echo "::set-output name=status::$(terraform output -raw green_status)"

  #     # Switch traffic to the Green environment if the Blue environment is currently live
  #     - name: Switch traffic to Green if Blue is currently live
  #       if: steps.blue_status.outputs.status == 'live'
  #       run: |
  #         terraform apply -var='live_environment=green' -auto-approve
  #         echo "Switched live traffic to Green environment"

  #     # Switch traffic to the Blue environment if the Green environment is currently live
  #     - name: Switch traffic to Blue if Green is currently live
  #       if: steps.green_status.outputs.status == 'live'
  #       run: |
  #         terraform apply -var='live_environment=blue' -auto-approve
  #         echo "Switched live traffic to Blue environment"
