name: 'Frontend continuous integration'
on:
  workflow_dispatch: 
  pull_request:
    types:
      - opened 
    branches:
      - main
    paths:
      - starter/frontend/**

# env:
#   AWS_REGION: us-east-1     # Update this to your AWS Region
#   TF_ACTION_WORKING_DIR: 'terraform' # Update this to your Terraform files directory

jobs:
  lint:
    name: 'Lint the code'
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner
    # defaults:
    #   run:
    #     shell: bash
    #     working-directory: ./starter/frontend

    # steps:
    #   - name: Check out Git repository
    #     uses: actions/checkout@v3

    #   - name: Set up Node.js
    #     uses: actions/setup-node@v1
    #     with:
    #       node-version: latest

    #   - name: Install the dependencies
    #     run: npm ci

    #   - name: Run the tests.
    #     run: npm test

    #   - name: Run the linter
    #     run: npm run lint

      # ESLint and Prettier must be in `package.json`
      # - name: Install Node.js dependencies
      #   run: |
      #     cd starter/frontend
      #     npm ci

      # - name: Run linters
      #   uses: wearerequired/lint-action@v2
      #   with:
      #     eslint: true
      #     prettier: true

  # test:
  #   name: 'Test the app'
  #   runs-on: ubuntu-latest   # Use the latest Ubuntu runner

  #   steps:
  #     - name: Check out Git repository
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: latest

  #     # - name: Install the dependencies
  #     #   run: cd frontend && npm ci

  #     # - name: Run the tests.
  #     #   run: cd frontend && npm test

  # build:
  #   name: 'Build App'
  #   needs: [lint, test]
  #   runs-on: ubuntu-latest   # Use the latest Ubuntu runner
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ./setup/terraform
  #   steps:
  #     # Check out the code to the runner
  #     - name: Checkout
  #       uses: actions/checkout@v3
      
  #     # Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # Use your stored AWS Access Key ID
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }} # Use your stored AWS Secret Access Key
  #         aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
  #         aws-region: ${{ env.AWS_REGION }} # Use the region from your environment variables
        
  #     # Set up the specified version of Terraform
  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
      
  #     # Initialize your Terraform configuration
  #     - name: Terraform Init
  #       run: |
  #         cd setup/terraform & terraform init

      # # Validate your Terraform configuration
      # - name: Terraform Validate
      #   run: terraform validate 

      # # Generate and display an execution plan
      # - name: Terraform Plan
      #   run: terraform plan 

      # # Apply the changes required to reach the desired state of the configuration
      # - name: Terraform Apply
      #   run: terraform apply -auto-approve 

      # # Check the status of the Blue environment
      # - name: Check status of Blue Environment
      #   id: blue_status
      #   run: echo "::set-output name=status::$(terraform output -raw blue_status)"

      # # Check the status of the Green environment
      # - name: Check status of Green Environment
      #   id: green_status
      #   run: echo "::set-output name=status::$(terraform output -raw green_status)"

      # # Switch traffic to the Green environment if the Blue environment is currently live
      # - name: Switch traffic to Green if Blue is currently live
      #   if: steps.blue_status.outputs.status == 'live'
      #   run: |
      #     terraform apply -var='live_environment=green' -auto-approve
      #     echo "Switched live traffic to Green environment"

      # # Switch traffic to the Blue environment if the Green environment is currently live
      # - name: Switch traffic to Blue if Green is currently live
      #   if: steps.green_status.outputs.status == 'live'
      #   run: |
      #     terraform apply -var='live_environment=blue' -auto-approve
      #     echo "Switched live traffic to Blue environment"
