name: Frontend Continuous Integration
on:
  workflow_dispatch: 

  push: 
    branches:
      - feature_test

  pull_request:
    types:
      - opened 
    branches:
      - main
    paths:
      - starter/frontend/**

jobs:
  lint:
    name: Run lint
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4
      
      # - name: Get npm cache directory
      #   id: npm-cache-dir
      #   shell: bash
      #   run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # - uses: actions/cache@v3
      #   id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      #   with:
      #     path: ${{ steps.npm-cache-dir.outputs.dir }}
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
          cache: 'npm'  # Perform a cache action to restore cache before dependency install
        
      - name: Install the dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint

  test:
    name: Run test
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
          cache: 'npm'  # Perform a cache action to restore cache before dependency install
        
      - name: Install the dependencies
        run: npm ci

      - name: Run test
        run: npm run test

  build:
    name: Run build
    needs: [lint, test]
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner
    environment: production
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend

    steps:
      # Check out the code to the runner
      - name: Checkout
        uses: actions/checkout@v4
      
      # - name: Set up Node.js
      #   uses: actions/setup-node@v4.0.2
      #   with:
      #     node-version: 20.x 
      # - name: Install the dependencies
      #   run: npm ci
      # - name: Run build
      #   run: npm run build --if-present

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Show GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
      #   with:
      #     role-to-assume: arn:aws:iam::123456789012:role/my-github-actions-role
      #     aws-region: us-east-1

      # - name: Login to Amazon ECR Public
      #   id: login-ecr-public
      #   uses: aws-actions/amazon-ecr-login@v2
      #   with:
      #     registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          # ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo $IMAGE_TAG
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{vars.REACT_APP_MOVIE_API_URL}} --tag=mp-frontend:$IMAGE_TAG .
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # docker run --name mp-frontend -p 3000:3000 -d mp-frontend
          # docker ps
          # curl http://localhost:3000
          # push the image to ECR
          # Apply the Kubernetes manfiests using the image tag from build 